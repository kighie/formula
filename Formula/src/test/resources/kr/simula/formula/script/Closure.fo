
defn println(object value) { 
	if( not skipPrint ){
		System.out.println(value);
	}
} 



defn localFunc(number argA, number argB) : number {
	number retVal;
	if(argA > argB) {
		println(argA & 'X' & argB);
		retVal <- CEILING(argA * argB, 3);
	} else {
		println(argA & '+' & argB); 
		LOG(argA + argB) -> retVal; // left to right assignment
	}
	return retVal;
} 

defn  fnA(number a) : number{
	return a * 3;
}

defn fnB(number a) : number{
	return a * 7;
}

defn fnC(number a) : number{
	return a * 13;
}

defn fnTest(function fn, number num) : number {
	return fn(num / 3.1);
}


println( sampleObject.testMethod(3));
println( sampleObject.testMethod(4));
//println( sampleObject.testMethod);

println( fnTest(fnA, 4) );
println( fnTest(fnB, 4) );
println( fnTest(fnC, 4) );


println("=================");


println( "EVEN(4) " & fnTest(EVEN, 4) );
println( "EXP(4) " & fnTest(EXP, 4) );

println("====== Function Closure Array ===========");

println(fnTest );

function[] fnArray <- [fnA,fnB,fnC];  








foreach (function ar in fnArray ) {
	println( ar & " : "  & ar(5) );
};


println("====== Function Closure Array in function call ==========="); 

foreach (function a in fnArray) {
	println( " fnTest : EVEN : "  & fnTest(EVEN, 5) );
	println( " fnTest : " & a & " :: " & fnTest(a, 5) );
}

println("====== Function variable ==========="); 

function delegateFn <- fnA;

println(" delegateFn : "  & delegateFn(5));


